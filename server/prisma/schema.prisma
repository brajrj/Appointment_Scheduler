
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  role          Role     @default(USER)
  isVerified    Boolean  @default(false)
  profileImage  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  appointments        Appointment[]
  notifications       Notification[]
  businessProfile     BusinessProfile?
  availability        Availability[]
  providerAppointments Appointment[] @relation("ProviderAppointments")

  @@map("users")
}

model BusinessProfile {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @unique @db.ObjectId
  businessName  String
  businessType  String
  description   String?
  address       String?
  phone         String?
  email         String?
  workingHours  Json? // { monday: { start: "09:00", end: "17:00", isOpen: true }, ... }
  services      Service[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("business_profiles")
}

model Service {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  businessProfileId String   @db.ObjectId
  name             String
  description      String?
  duration         Int      // Duration in minutes
  price            Float
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  businessProfile BusinessProfile @relation(fields: [businessProfileId], references: [id], onDelete: Cascade)
  appointments    Appointment[]

  @@map("services")
}

model Appointment {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  userId        String            @db.ObjectId
  serviceId     String            @db.ObjectId
  providerId    String            @db.ObjectId // The business owner/admin
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  status        AppointmentStatus @default(PENDING)
  notes         String?
  cancelReason  String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service     Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  provider    User    @relation("ProviderAppointments", fields: [providerId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model Availability {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  date      DateTime
  startTime DateTime
  endTime   DateTime
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("availability")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?            // Additional data related to the notification
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum Role {
  USER
  ADMIN
  BUSINESS_OWNER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum NotificationType {
  APPOINTMENT_BOOKED
  APPOINTMENT_CONFIRMED
  APPOINTMENT_CANCELLED
  APPOINTMENT_REMINDER
  APPOINTMENT_RESCHEDULED
  SYSTEM_NOTIFICATION
}
